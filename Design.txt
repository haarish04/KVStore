A simple txt file to keep track of my progress and how I designed this application

The idea is to create a simple key-value database that listens to a port from where the client can send and retrieve data. This is done by java socket programming

The ClientHandler handles the input data from the open socket. Use buffered reader and retrieve data from inputdataStream.
Store the input as a string and extract the command and the args from it and perform the necessary actions. The output is written by the printWriter and sent to the socket via the outputDataStream.
Once the output is sent, the printwriter will flush the buffer (specified by the true argument passed to printwriter)
The first basic implementation covers the simple operations of SET, GET, DELETE and UPDATE
The command BYE will be used to terminate session

The user will be able to create collections storing multiple records and specify any tags associated with them.
They will also have the option to add tags to existing collection and also delete these tags.
Lastly, the existing collections can be also deleted or renamed

<---------------------------------------------------------------------------------->

The KVServer component is used to host the database on a specified port and expose the socket endpoint to the client
Using the thread.sleep to handle terminating of threads as a temporary fix

The KVServices is the main component which handles all the operations and maintains the actual store which is a hashmap.
It also consists of additional helper methods for handling the UUID.

The hashmap is of the format <key, <UUID, value>>
The key is used to identify the record and perform actions as necessary.
The UUID is a unique identifier for every key value insertion, which can be used later on for logging and error debugging.
Value is a list of Objects. I am doing this in order to store multiple values associated to a key.

For storing records we are using a ConcurrentHashMap. HashMap provides good performance for basic operations such as get, set, delete.
The concurrent version is essential for maintaining thread-safety and handling concurrent requests.

The next part of the implementation involves grouping records together into collections similar to mongoDB, this can be used to organize data
To achieve this, each collection is a concurrentHashMap which stores individual records (hashmaps) along with the identifier object.
This identifier object consists of key to identify it and a tag, which can be used to store some additional info about the collection.

<---------------------------------------------------------------------------------->
The following are the operations on collections

--CREATE--
Create a new collection with the name specified and any tags specified by the user

--GET--
Get the collection identified by the name

--ADDTAG--
Add tags to existing collection, this appends the tag to the existing tag (stored as a string)

--DELTAG--
Delete tags from existing collection

--RENAME--
Rename collection name to specified name

The user will have to specify the collection that they want to perform operations something like this:

collection.set {key, value}
collection.get {key}
collection.delete {key}

While creating a new collection by the user. There needs to be a central repo of sorts that will store all the collections.
Instead of a global hashmap storing all the collections, I wanted to create a class just to store the ID of each collections which will be used to reference them.
But I cannot do this as every time the create collection is invoked, the map created will be limited to the scope of the method and will not be available globally.
So I decided to use a static hashmap in the KVStore class to store all the collections. This acts as a central repo of all the collections. Later on I will look into ways to serialize and deserialize data and try to store externally.

<---------------------------------------------------------------------------------->
The following are the operations on individual records

--SET--
For each set operation, if the key does not exist, create a new key value pair. 
If the key already exists, append the value to the list of values associated with the key

--GET--
For each get operation, if the key exists, return the list of values associated with the key.
If no arugments present, getAll, return all records in the collection

--DELETEKEY--
For each delete operation, if the key exists, remove the key values pair from the collection

--DELETEVALUE--
For each delete operation, if the key exists, remove the specified value from the list of values associated to the key

--UPDATE--
For each update operation, if the key exists, update the value associated with the key. The user passes three arguments, key, old value and new value then old value is updated.

<---------------------------------------------------------------------------------->

While implementing the methods for get,set operations on individual records, I need to pass the collection name as well in the arguments.
The problem is, I cannot use regex with switch case on the clientHandler, so if a query looks like: col.get {args}, I will have to split the string at . and extract LHS as collection name and the following letters as the operation, followed by the args.

<---------------------------------------------------------------------------------->

While storing records in the collection, need to be careful with the initializing of data structures inside the methods.
For the first version, I will be using the "Object" data type instead of having strict type checking which I will have to change later on.

During the set record, I am checking presence of key. If key already exists, the value is appended to the list of values associated with the key.
This would imply that I cannot store duplicate keys. The advantage is that the key can serve as a unique identifier. The disadvantage is not allowing multiple different key value pairs with the same key.
While updating records, there is no put method or modify methods for Pair class. When I update a record, I need to create a new Pair for the record and store in the collection.

<---------------------------------------------------------------------------------->
Features to consider after I am done with the basic implementation of the DB (first version)

-> Check status of DB
-> Delete collections 
-> DeleteAll records in a collection
-> Update tags in collection
-> Figure out file storage